<!DOCTYPE html>
<html lang="es">

<head>
	<meta charset="UTF-8">
	<title>vCard</title>
	<script src="https://cdn.jsdelivr.net/npm/pako@1.0.11/dist/pako.min.js"></script>
</head>

<body>
	<div id="compresion" style="display: none;">
		<h2>vCard</h2>
		<textarea id="texto" rows="10" cols="60">BEGIN:VCARD
VERSION:3.0
N:Applesed;John;;;
FN:John Appleseed
ORG:APPLE
TITLE:Manager
TEL;TYPE=WORK,PREF:+18885551212
EMAIL;TYPE=WORK,PREF:john.appleseed@apple.com
END:VCARD</textarea>
		<textarea id="resultado" rows="10" cols="60" readonly></textarea>
		<button onclick="comprimirTexto()">vCard (Compress / Base64)</button>
	</div>
	<script>
	window.onload = function() {
		const hash = window.location.hash.substr(1);
		if(hash) {
			descomprimirYDecodificar(hash);
		} else {
			document.getElementById('compresion').style.display = 'block';
		}
	}
	const etiquetas = {
		0x01: "N:",
		0x02: "FN:",
		0x03: "ORG:",
		0x04: "TITLE:",
		0x05: "TEL:",		
		0x06: "TEL;TYPE=WORK,PREF:",
		0x07: "EMAIL:",
		0x08: "EMAIL;TYPE=WORK,PREF:"
	};

	function descomprimirYDecodificar(textoComprimido) {
		const datosComprimidos = atob(textoComprimido);
		const charData = datosComprimidos.split('').map(c => c.charCodeAt(0));
		const binData = new Uint8Array(charData);
		const datosDescomprimidos = pako.inflate(binData);
		const vCardData = decodificarVCard(datosDescomprimidos);
		descargarComoArchivo(vCardData.contenido, vCardData.filename);
	}

	function decodificarVCard(datos) {
		let resultado = "";
		let filename = "vCard.vcf";
		let i = 0;
		resultado += "BEGIN:VCARD" + "\r\n";
		resultado += "VERSION:3.0" + "\r\n";
		while(i < datos.length) {
			const codigo = datos[i++];
			const etiqueta = etiquetas[codigo];
			let valor = "";
			while(i < datos.length && !(datos[i] in etiquetas)) {
				valor += String.fromCharCode(datos[i++]);
			}
			if(valor !== undefined) {
				resultado += etiqueta + valor + "\r\n";
				if (etiqueta === "FN:") {
					filename = valor.toLowerCase().replace(/\s/g, '') + ".vcf";
				}
			} else {
				resultado += etiqueta + "\r\n";
			}
		}
		resultado += "END:VCARD" + "\r\n";
		return { contenido: resultado, filename: filename };
	}

	function descargarComoArchivo(contenido, filename) {
		const elemento = document.createElement('a');
		const archivo = new Blob([contenido], {
			type: 'text/vcard;charset=utf-8'
		});
		const url = URL.createObjectURL(archivo);
		
		elemento.href = url
		elemento.download = filename;
		document.body.appendChild(elemento);
		elemento.click();
		document.body.removeChild(elemento);

		//window.open(url, '_blank');
		//window.location.href = `intent://scan/#Intent;scheme=content;type=text/vcard;S.browser_fallback_url=${encodeURIComponent(url)};end`;
	}
		
	function comprimirTexto() {
		const texto = document.getElementById('texto').value;
		const campos = texto.split(/\r?\n/);
		let buffer = new Uint8Array(campos.length * 30);
		let offset = 0;
		const codigos = Object.fromEntries(Object.entries(etiquetas).map(([key, value]) => [value.split(':')[0], key]));
		campos.forEach(campo => {
			if(campo.trim() === '') return;
			campo = campo.trim()
			let [etiqueta, valor] = campo.split(':');
			etiqueta = etiqueta.trim();
			valor = valor ? valor.trim() : '';
			const tagCode = codigos[etiqueta];
			if(tagCode !== undefined) {
				buffer[offset++] = tagCode;
				for(let i = 0; i < valor.length; i++) {
					buffer[offset++] = valor.charCodeAt(i);
				}
			}
		});
		const datosComprimidos = pako.deflate(buffer.subarray(0, offset), {
			level: 9
		});
		const base64Comprimido = btoa(String.fromCharCode.apply(null, datosComprimidos));
		document.getElementById('resultado').value = base64Comprimido;
	}
	</script>
</body>

</html>
